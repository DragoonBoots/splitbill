stages:
  - test
  - build
  - pages

.ubuntu-20-04:
  image: ubuntu:20.04
  tags:
    - linux
    - docker
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
    - export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
    - export CTEST_PARALLEL_LEVEL=$(nproc)
    - apt-get -y update
    - apt-get -y install build-essential cmake git libboost-dev libboost-date-time-dev libboost-locale-dev pandoc qtbase5-dev
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=Off -S . -B build

.windows-1809:
  # Windows jobs are designed to run on gitlab.com shared windows runners
  # https://gitlab.com/gitlab-org/ci-cd/shared-runners/images/gcp/windows-containers/blob/master/cookbooks/preinstalled-software/README.md
  tags:
    - windows
    - windows-1809
  variables:
    CONAN_USER_HOME: "$CI_PROJECT_DIR/.cache"
    QT_VERSION: 5.15.0
    QT_TOOLCHAIN: msvc2019_64
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  before_script:
    # Setup environment
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    # Horrible kludge until https://github.com/chocolatey/choco/issues/89 is finally fixed
    - rm -Path "$env:ChocolateyInstall\bin\cpack.exe" -Force
    - choco install vswhere -y
    - refreshenv
    # Install deps
    - choco install nsis.portable -y
    - choco install pandoc -y --ia=ALLUSERS=1
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install git.install -y --params "/GitOnlyOnPath /SChannel /NoAutoCrlf"
    - choco install python -y --params "/quiet /InstallAllUsers=1 /Include_doc=0 /Include_debug=1 /CompileAll=1 /PrependPath=1 /Include_dev=1 /Include_exe=1 /InstallLauncherAllUsers=1 /TargetDir=$($env:PYTHON_PATH) /Include_lib=1 /Include_pip=1 /Include_symbols=1 /Include_tcltk=0 /Include_test=0 /Include_tools=1"
    - refreshenv
    - python -m ensurepip
    # Get Qt
    - pip install requests semantic_version lxml
    - refreshenv
    - git clone https://github.com/engnr/qt-downloader.git
    - python qt-downloader\qt-downloader --output=.qt windows desktop "$env:QT_VERSION" "win64_$env:QT_TOOLCHAIN"
    - $env:Path += ";$($pwd.path)\$env:QT_VERSION\$env:QT_TOOLCHAIN\bin"
    - setx Path "$($env:Path)"
    # Build deps
    - pip install conan
    - conan profile new --detect --force default
    - conan install . --profile=default --install-folder=build
    # Loads Visual Studio tools into the PATH (borrowed from https://gist.github.com/oising/028c8182e1940d3f7e661dabec4f673b)
    - $vsconfig = $(convertfrom-json ((iex "vswhere -all -nologo -requires 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64' -products * -latest -format json") -join ""))
    - $instanceId = $vsconfig.instanceid
    - $bootstrapper = join-path $vsconfig.installationPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
    - import-module $bootstrapper
    - try { enter-vsdevshell -VsInstanceId $instanceId -SkipAutomaticLocation -DevCmdArguments '-arch=x64'} catch {}
    # Create buildsystem
    - cmake -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles" -DQt5_DIR="$($pwd.path)/.qt/$QT_VERSION/$QT_TOOLCHAIN/lib/cmake/Qt5" -DBUILD_TESTING=Off -S . -B build
  cache:
    key: "windows-1809"
    paths:
      - ".cache"

.macos-13:
  # The Mac OS jobs assume that several things are already installed on the build machine:
  # Python 3, pandoc, cmake, git, p7zip, and the XCode toolchain
  # Libraries boost and qt are installed via macports
  tags:
    - darwin
    - darwin-13
  variables:
    QT_VERSION: 5.15.0
  before_script:
    - export CMAKE_BUILD_PARALLEL_LEVEL=$(sysctl -n hw.logicalcpu)
    - export CTEST_PARALLEL_LEVEL=$(sysctl -n hw.logicalcpu)
    # Create buildsystem
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=Off -S . -B build

test-ubuntu-20-04:
  extends: .ubuntu-20-04
  stage: test
  script:
    - cmake -DBUILD_TESTING=On build
    - cmake --build build --target splitbill_lib_test
    - ./build/tests/lib/splitbill_lib_test --gtest_output="xml:report.xml"
  artifacts:
    reports:
      junit: report.xml

test-windows-1809:
  extends: .windows-1809
  stage: test
  script:
    - cmake -DBUILD_TESTING=On build
    - cmake --build build --target splitbill_lib_test
    - .\build\tests\lib\splitbill_lib_test --gtest_output="xml:report.xml"
  artifacts:
    reports:
      junit: report.xml

test-macos-13:
  extends: .macos-13
  stage: test
  script:
    - cmake -DBUILD_TESTING=On build
    - cmake --build build --target splitbill_lib_test
    - ./build/tests/lib/splitbill_lib_test --gtest_output="xml:report.xml"
  artifacts:
    reports:
      junit: report.xml

build-ubuntu-20-04:
  extends: .ubuntu-20-04
  stage: build
  needs:
    - test-ubuntu-20-04
  script:
    - cmake -DBUILD_PACKAGE=On build
    - cmake --build build
    - cd build
    - cpack -G "TGZ;TBZ2;DEB" -B "$(pwd)/packages"
  artifacts:
    paths:
      - build/packages/splitbill-*.*
    expire_in: 1 week

build-windows-1809:
  extends: .windows-1809
  stage: build
  needs:
    - test-windows-1809
  script:
    - cmake -DBUILD_PACKAGE=On build
    - cmake --build build
    - cd build
    - cpack -G "ZIP;NSIS" -B "$($pwd.path)/packages"
  artifacts:
    paths:
      - build/packages/splitbill-*.*
    expire_in: 1 week

build-macos-13:
  extends: .macos-13
  stage: build
  needs:
    - test-macos-13
  script:
    - cmake -DBUILD_PACKAGE=On build
    - cmake --build build
    - cd build
    - cpack -G "ZIP;DragNDrop" -B "$(pwd)/packages"
  artifacts:
    paths:
      - build/packages/splitbill-*.*
    expire_in: 1 week

pages:
  stage: pages
  only:
    - master
  tags:
    - docker
  needs:
    - job: build-ubuntu-20-04
      artifacts: true
    - job: build-windows-1809
      artifacts: true
    - job: build-macos-13
      artifacts: true
  image: ubuntu:20.04
  variables:
    DEBIAN_FRONTEND: noninteractive
  script:
    - apt-get -y update
    - apt-get -y install build-essential cmake git python3 python3-pip
    - pip3 install sphinx
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_APP=Off -DBUILD_DOC=On -DDOC_OUTPUT_DIR=$(pwd)/public -S . -B build
    - cmake --build build --target doc
  artifacts:
    paths:
      - public

stages:
  - test
  - build

.ubuntu-20-04:
  image: ubuntu:20.04
  tags:
    - linux
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
    - export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
    - export CTEST_PARALLEL_LEVEL=$(nproc)
    - apt-get -y update
    - apt-get -y install build-essential cmake git libboost-dev libboost-date-time-dev libboost-locale-dev pandoc qtbase5-dev
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=Off -S . -B build

.windows-1809:
  tags:
    - windows
    - windows-1809
  variables:
    CONAN_USER_HOME: "$CI_PROJECT_DIR"
    PYTHON_PATH: 'C:\Python38'
    QT_VERSION: 5.15.0
    QT_TOOLCHAIN: msvc2019_64
    #    BOOST_VERSION: 1.67.0
    #    BOOST_INSTALLER_FILE: boost_1_67_0-msvc-14.1-64.exe
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  before_script:
    # Setup environment
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install visualstudio2019buildtools -y
    - choco install visualstudio2019-workload-vctools -y
    - choco install vswhere -y
    - refreshenv
    # Loads Visual Studio tools into the PATH
    - "& (Join-Path (Split-Path -Path (vswhere -all -nologo -requires 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64' -products * -latest -property productpath) -parent) -childPath 'Launch-VsDevShell.ps1')"
    # Install deps
    - choco install nsis -y
    - choco install pandoc -y --ia=ALLUSERS=1
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install git.install -y --params "/GitOnlyOnPath /SChannel /NoAutoCrlf"
    - choco install python -y --params "/quiet /InstallAllUsers=1 /Include_doc=0 /Include_debug=1 /CompileAll=1 /PrependPath=1 /Include_dev=1 /Include_exe=1 /InstallLauncherAllUsers=1 /TargetDir=$($env:PYTHON_PATH) /Include_lib=1 /Include_pip=1 /Include_symbols=1 /Include_tcltk=0 /Include_test=0 /Include_tools=1"
    #    - choco install wixtoolset -y
    #    - curl.exe -L -o boost-installer.exe "https://downloads.sourceforge.net/project/boost/boost-binaries/$env:BOOST_VERSION/$env:BOOST_INSTALLER_FILE"
    #    - ./boost-installer.exe /VERYSILENT
    - refreshenv
    #    - vcpkg install boost-locale boost-date-time
    #    - $env:Path += ";$($env:PYTHON_PATH);$($env:PYTHON_PATH)\Scripts;$($env:USER_PYTHON_PATH)\Scripts;$($env:NSIS_PATH);C:\Program Files\CMake\bin"
    #    - setx Path "$($env:Path)"
    - python -m ensurepip
    # Get Qt
    - pip install requests semantic_version lxml
    - git clone https://github.com/engnr/qt-downloader.git
    - python qt-downloader\qt-downloader --output=.qt windows desktop "$env:QT_VERSION" "win64_$env:QT_TOOLCHAIN"
    - $env:Path += ";$($pwd.path)\$env:QT_VERSION\$env:QT_TOOLCHAIN\bin"
    - setx Path "$($env:Path)"
    # Build deps
    - pip install conan
    - conan profile new --detect --force default
    - conan profile show default
    #    - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
    - conan install . --profile=default --install-folder=build
    - cat build/conan.lock
    - cat build/conaninfo.txt
    # Create buildsystem
    - cmake -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles" -DQt5_DIR="$($pwd.path)/.qt/$QT_VERSION/$QT_TOOLCHAIN/lib/cmake/Qt5" -DBUILD_TESTING=Off -S . -B build
  cache:
    key: "windows-1809"
    paths:
      - ".conan"

test-ubuntu-20-04:
  extends: .ubuntu-20-04
  stage: test
  script:
    - cmake -DBUILD_TESTING=On build
    - cmake --build build --target splitbill_lib_test
    - cd build
    - ctest

test-windows-1809:
  extends: .windows-1809
  stage: test
  script:
    - cmake -DBUILD_TESTING=On build
    - cmake --build build --target splitbill_lib_test
    - cd build
    - ctest

build-ubuntu-20-04:
  extends: .ubuntu-20-04
  stage: build
  needs:
    - test-ubuntu-20-04
  script:
    - cmake -DBUILD_PACKAGE=On build
    - cmake --build build
    - cd build
    - cpack -G "TGZ;TBZ2;DEB" -B "$(pwd)/packages"
  artifacts:
    paths:
      - build/packages/splitbill-*.tar.gz
      - build/packages/splitbill-*.tar.bz2
      - build/packages/splitbill-*.deb
      - build/packages/splitbill-*.md5
    expire_in: 1 week

build-windows-1809:
  extends: .windows-1809
  stage: build
  needs:
    - test-windows-1809
  script:
    - cmake -DBUILD_PACKAGE=On build
    - cmake --build build
    - cd build
    - cpack -G "NSIS" -B "$($pwd.path)/packages"
  artifacts:
    paths:
      - build/packages/splitbill-*.*
    expire_in: 1 week

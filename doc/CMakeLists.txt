find_program(SPHINXBUILD_PROG sphinx-build)
set(DOC_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}")
set(DOC_OUTPUT_DIR "${CMAKE_CURRENT_LIST_DIR}/_build" CACHE PATH "Documentation output directory")
set(DOC_PACKAGES_DIR "${CMAKE_BINARY_DIR}/packages" CACHE PATH "Path to find packages for display")

configure_file(conf.py.in "${CMAKE_CURRENT_BINARY_DIR}/conf.py")

# Generate paths and checksums
file(MD5 "${DOC_PACKAGES_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-Darwin.dmg" HASH_DARWIN_DMG)
file(MD5 "${DOC_PACKAGES_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-Darwin.zip" HASH_DARWIN_ZIP)
file(MD5 "${DOC_PACKAGES_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-Linux.deb" HASH_LINUX_DEB)
file(MD5 "${DOC_PACKAGES_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-Linux.tar.bz2" HASH_LINUX_TBZ)
file(MD5 "${DOC_PACKAGES_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-Linux.tar.gz" HASH_LINUX_TGZ)
file(MD5 "${DOC_PACKAGES_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-win64.exe" HASH_WIN64_INSTALLER)
file(MD5 "${DOC_PACKAGES_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-win64.zip" HASH_WIN64_ZIP)
configure_file(download.rst.in "${CMAKE_CURRENT_SOURCE_DIR}/download.rst")

add_custom_target(doc
    COMMAND ${SPHINXBUILD_PROG} -b html -j auto -c "${CMAKE_CURRENT_BINARY_DIR}" "${DOC_SOURCE_DIR}" "${DOC_OUTPUT_DIR}"
    BYPRODUCTS "${DOC_OUTPUT_DIR}")
